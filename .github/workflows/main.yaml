# Workflow settings
# See https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions

name: Build/Test SHAW # GUI display name

on: # Triggers, see https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows
  push:
    branches: [master, develop, 2-Enable-github-actions-via-docker]
  pull_request:
    branches: [master, develop]

#concurrency: # Concurrency group: which jobs run together and which cancel each other
#  group: CI-${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # true -> cancel all jobs if any fails
      max-parallel: 8

      # Build matrix for your jobs: you can define different variations to run each job in
      # matrix configurations - reachable with ${{ matrix.config.<key> }}.
      # Extra options:
      # - cxx:  path to C++ compiler
      # - mode: build mode inside Pressio (Debug / Release)
      matrix:
        config:
          - { cxx: clang++-9, image: ubuntu-20.04-kokkos_3.5.00-kokkoskernels_3.5.00-yamlcpp_0.7.0-openmp }
          - { cxx: g++-9, image: ubuntu-20.04-kokkos_3.5.00-kokkoskernels_3.5.00-yamlcpp_0.7.0-openmp-clang }

    env: # environment variables available to all steps
      CXX: ${{ matrix.config.cxx }}
      APT_PACKAGES: python3 pip python-is-python3 g++ clang gpg wget libyaml-cpp-dev
      PIP_PACKAGES: pytest numpy scipy matplotlib
      SHAWDIR: /home/runner/work/SHAW/SHAW
      WORKDIR: /home/runner/work/build
      SHAWBUILDDEB_DIR: /home/runner/work/build/shaw-build-debug
      SHAWBUILDREL_DIR: /home/runner/work/build/shaw-build-release

    container: pressiomodelreduction/${{ matrix.config.image }}

    steps:
      - uses: actions/checkout@v2 # check out the repository

      - name: Check environment
        run: |
          ls -la /__w/SHAW
          echo ------------------------------------------------------
          ls -la /__w/SHAW/SHAW
          echo ======================================================
          echo CPU Threads: $(grep -c processor /proc/cpuinfo)
          echo ======================================================
          echo $(which python) --version
          python --version
          echo ======================================================
          cmake --version
          echo ======================================================
          echo Source directory: $SHAWDIR
          echo work directory: $WORKDIR
          echo ======================================================
          git --version
          cd $SHAWDIR
          git status
          git branch

      - name: Install required Python modules
        run: |
          pip install $PIP_PACKAGES
          echo ======================================================
          pip list
          echo ======================================================

      - name: Configure SHAW (debug)
        run: |
          cd $WORKDIR
          cmake \
          -DCMAKE_VERBOSE_MAKEFILE:STRING=On \
          -DCMAKE_BUILD_TYPE:STRING=Debug \
          -DKokkosKernels_DIR=/tpls/kokkoskernels/lib/cmake/KokkosKernels \
          -B $SHAWBUILDDEB_DIR -S $SHAWDIR
          #-Dyaml-cpp_DIR=/tpls/yamlcpp/share/cmake \

      - name: Build/run C++ tests (debug)
        run: |
          export NUM_CPU=$(grep -c processor /proc/cpuinfo)
          cmake --build $SHAWBUILDDEB_DIR -j $NUM_CPU
          cd $SHAWBUILDDEB_DIR
          ctest -j $NUM_CPU --output-on-failure

      - name: Configure SHAW (release)
        run: |
          cd $WORKDIR
          cmake \
          -DCMAKE_VERBOSE_MAKEFILE:STRING=On \
          -DCMAKE_BUILD_TYPE:STRING=Release \
          -DKokkosKernels_DIR=/tpls/kokkoskernels/lib/cmake/KokkosKernels \
          -B $SHAWBUILDREL_DIR -S $SHAWDIR
          #-Dyaml-cpp_DIR=/tpls/yamlcpp/share/cmake \

      - name: Build/run C++ tests (release)
        run: |
          export NUM_CPU=$(grep -c processor /proc/cpuinfo)
          cmake --build $SHAWBUILDREL_DIR -j $NUM_CPU
          cd $SHAWBUILDREL_DIR
          ctest -j $NUM_CPU --output-on-failure
